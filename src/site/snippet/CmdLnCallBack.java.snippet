import com.Ostermiller.util.*;
/**
 * Associate each option with a listener.
 * Good when:
 * Multiple places need to know about command line options.
 * Properly preserves argument ordering when a later option may cancel out an earlier option.
 * Drawbacks:
 * Requires non-static context.
 */
public class OptionCallback {
    private String fileName = null;
    private int delay = 0;
    private void parseCommandLine(String[] args){
        final CmdLn cmdLn = new CmdLn(args).setDescription("demo command line application");
        cmdLn.addOption(
            new CmdLnOption("help",'h').setListener(
                new CmdLnListener(){
                    public void found(CmdLnResult result){
                        cmdLn.printHelp();
                        System.exit(0);
                    }
                }
            )
        );
        cmdLn.addOption(
            new CmdLnOption("file",'f').setRequiredArgument().setDescription("file to open").setListener(
                new CmdLnListener(){
                    public void found(CmdLnResult result){
                        fileName = result.getArgument();
                    }
                }
            )
        );
        cmdLn.addOption(
            new CmdLnOption("delay").setOptionalArgument().setDescription("delay in seconds (default 5 seconds)").setListener(
                new CmdLnListener(){
                    public void found(CmdLnResult result){
                        delay = 5000;
                        if (result.getArgumentCount() > 0){
                            delay = Integer.parseInt(result.getArgument()) * 1000;
                        }
                    }
                }
            )
        );
        cmdLn.parse();
    }
    public static void main(String[] args) throws Exception {
        OptionCallback optionCallback = new OptionCallback();
        optionCallback.parseCommandLine(args);
        if (optionCallback.delay > 0){
            Thread.sleep(optionCallback.delay);
        }
        if (fileName != null){
            // open file and do work...
        }
        for(String argument: cmd.getNonOptionArguments()){
            // other arguments
        }
    }
}
